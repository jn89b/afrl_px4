make --dry-run --always-make --keep-going --print-directory
make: Entering directory '/home/justin/afrl_px4'
# check if the desired cmake configuration matches the cache then CMAKE_CACHE_CHECK stays empty
# change to build folder which fails if it doesn't exist and CACHED_CMAKE_OPTIONS stays empty
# fetch all previously configured and cached options from the build folder and transform them into the OPTION=VALUE format without type (e.g. :BOOL)
# transform the options in CMAKE_ARGS into the OPTION=VALUE format without -D
# find each currently desired option in the already cached ones making sure the complete configured string value is the same
# if the complete list of desired options is found in the list of verified options we don't need to reconfigure and CMAKE_CACHE_CHECK stays empty
# make sure to start from scratch when switching from GNU Make to Ninja
if [ "Unix\ Makefiles" = "Ninja" ] && [ -e "/home/justin/afrl_px4/build/px4_sitl_default"/Makefile ]; then rm -rf "/home/justin/afrl_px4/build/px4_sitl_default"; fi
# make sure to start from scratch if ninja build file is missing
if [ "Unix\ Makefiles" = "Ninja" ] && [ ! -f "/home/justin/afrl_px4/build/px4_sitl_default"/build.ninja ]; then rm -rf "/home/justin/afrl_px4/build/px4_sitl_default"; fi
# only excplicitly configure the first build, if cache file already exists the makefile will rerun cmake automatically if necessary
if [ ! -e "/home/justin/afrl_px4/build/px4_sitl_default"/CMakeCache.txt ] || [  ]; then mkdir -p "/home/justin/afrl_px4/build/px4_sitl_default" && cd "/home/justin/afrl_px4/build/px4_sitl_default" && cmake "/home/justin/afrl_px4" -G""Unix\ Makefiles"" -DCONFIG=px4_sitl_default || (rm -rf "/home/justin/afrl_px4/build/px4_sitl_default"); fi
# run the build for the specified target
cmake --build "/home/justin/afrl_px4/build/px4_sitl_default" -- -j4 --no-print-directory 
make: Leaving directory '/home/justin/afrl_px4'
 
